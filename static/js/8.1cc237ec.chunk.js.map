{"version":3,"sources":["Component/common/Table/TableWithPagination.tsx","Component/submission/SubmissionList/SubmissionList.tsx","Component/common/Table/TableWithAllData.tsx","Component/common/Table/TableWithSelection.tsx","Component/submission/SubmissionList/ModalSubmissionList.tsx"],"names":["connect","state","UState","UserReducer","TState","TableReduce","roles","userInfo","tableData","dispatch","setTableInfo","name","data","type","setDataSource","add","withTranslation","withRouter","props","useState","total","setTotal","setTableDataX","loading","setLoading","PageNow","setPageNow","ck","defaultPageSize","PageSize","setPageSize","searchText","setSearchText","tableVersion","setTableVersion","setTableData","undefined","getInfo","pageNow","pageSize","searchKey","moreProps","propsTableInfo","tableInfo","form","setFieldsValue","pn","ps","sk","fmp","getFieldsValue","API","then","rows","APIRowsTransForm","totalNum","totalPage","useEffect","initRequestProps","useForm","onFinish","values","JSON","stringify","onReset","resetFields","tf","valuesAfter","propsTableVersion","dataSource","useList","title","bordered","size","className","cardProps","extra","search","getForm","placeholder","t","onSearch","text","enterButton","style","width","useFormBtn","marginLeft","onClick","htmlType","grid","itemLayout","renderItem","pagination","onChange","page","current","hideOnSinglePage","showQuickJumper","showLessItems","showSizeChanger","pageSizeOptions","rowKey","columns","rowSelection","isLogin","addTableVersion","setSelectedRowKeys","setTopSubmission","submissionID","submissionInfo","setSubmissionModalVis","webSocketOpen","setWebSocketOpen","webSocketQueryList","setWebSocketQueryList","refreshDisable","setRefreshDisable","selectedRowKeys","showSubmission","record","submissionId","problemTitle","TimeLimit","timeLimit","MemoryLimit","memoryLimit","scoreMod","sumScore","testcaseMod","QuerySubmissionAPI","dataIndex","key","render","cursor","caseType","StateList","indexOf","SubmissionMap","append","RunningStep","checkpointNum","publicCheckpointNum","Math","floor","moment","format","fromNow","columnsAll","problemCodeRender","open","dataHandle","submissionIdHex","checkpointType","checkpointIndex","judgeResult","judgeScore","usedTime","usedMemory","dt","Index","findIndex","value","result","toString","score","runningNumber","x","parseInt","nowID","queryList","lessInfo","minWidth","judgeAuth","cApi","rejudge","afterSuccess","icon","message","success","setTimeout","disabled","actions","btnProps","block","btnText","disableSelection","Item","label","onPressEnter","e","allowClear","RunningResultList","map","Option","isValueEmpty","v","length","match","charCodeAt","push","submitTime","gmtCreate","React","memo","DragHandle","SortableHandle","color","SortableItem","SortableElement","XSortableContainer","SortableContainer","onSortEnd","oldIndex","newIndex","arrayMoveImmutable","afterDrag","sortColumns","useDrag","concat","components","body","wrapper","useDragHandle","disableAutoscroll","helperClass","row","restProps","index","nextProps","updateTrick","TableWithSelection","this","selections","onSelect","changeableRowKeys","newSelectedRowKeys","filter","includes","uesAlldata","Component","ModalVis","setModalVis","visible","footer","onCancel"],"mappings":"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","file":"static/js/8.1cc237ec.chunk.js","sourcesContent":["import {Button, Card, Form, List, Space, Table} from \"antd\";\nimport React, {Dispatch, useEffect, useState} from \"react\";\nimport {defaultPageSize} from \"../../../Config/constValue\";\nimport {UserState} from \"../../../Type/Iuser\";\nimport {connect} from \"react-redux\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router\";\nimport Search from \"antd/es/input/Search\";\nimport {TableState} from \"../../../Type/ITable\";\nimport {ck} from \"../../../Utils/empty\";\nimport {SizeType} from \"antd/lib/config-provider/SizeContext\";\nimport {ColumnsType} from \"antd/lib/table/interface\";\nimport {useForm} from \"antd/es/form/Form\";\n\nexport interface TableWithPaginationProps {\n    API: any                  // 表格查询数据的接口\n    size: SizeType            // 表格的大小\n    columns: ColumnsType<any> // 表格的列\n    name: string              // 表格名称\n    APIRowsTransForm?: any    // 针对API传输的数据进行转化的函数\n    search?: boolean          // 是否开启搜索功能\n    defaultPageSize?: number  // 表格默认的页大小\n\n    // 面向 可选择的行 开放的接口\n    // setDataSource?: any       // 输出当前表格的数据\n    rowKey?: any              // 作为 key 记录的值\n    rowSelection?: any        // 可选列的相关配置\n\n}\n\nconst TableWithPagination = (props: any) => {\n    const [total, setTotal] = useState<number>(0)                   // 项的总数\n    const [tableData, setTableDataX] = useState()                            // 表格核心数据\n    const [loading, setLoading] = useState(true)                    // 表格的加载状态\n    const [PageNow, setPageNow] = useState<number>(1)               // 当前的页码数\n    const [PageSize, setPageSize] = useState<number>(ck(props.defaultPageSize, defaultPageSize))         // 当前的页大小\n    const [searchText, setSearchText] = useState<string | undefined>()        // 搜索的文本\n    const [tableVersion, setTableVersion] = useState<number>(0)     // 表格版本（控制表格刷新）\n\n    const setTableData = (data: any) => {\n        setTableDataX(data)\n        // 若有 选中行 的相关配置，传递数据进行更新\n        if (props.setDataSource !== undefined && props.name !== undefined)\n            props.setDataSource(data, props.name)\n    }\n    // 这里的所有的参数都只能增量的修改，不能删除，删除需要手动更新 redux\n    const getInfo = (pageNow?: number, pageSize?: number, searchKey?: string, moreProps?: any) => {\n        const propsTableInfo = props.tableData[props.name]?.tableInfo\n        if (propsTableInfo !== undefined) {\n            if (moreProps === undefined && propsTableInfo.moreProps !== undefined){\n                form.setFieldsValue(propsTableInfo.moreProps)\n            }\n            pageNow = pageNow ?? propsTableInfo.pageNow\n            pageSize = pageSize ?? propsTableInfo.pageSize\n            searchKey = searchKey ?? propsTableInfo.searchKey\n            moreProps = moreProps ?? propsTableInfo.moreProps\n        }\n        let pn = pageNow ?? PageNow\n        let ps = pageSize ?? PageSize\n        let sk = searchKey ?? searchText\n        let fmp = moreProps ?? form.getFieldsValue()\n        setPageNow(pn)\n        setPageSize(ps)\n        setSearchText(sk)\n        setLoading(true)\n        props.API({\n            pageNow: pn,\n            pageSize: ps,\n            searchKey: sk,\n            ...fmp\n        }).then((data: any) => {\n            // console.log(\"data\", data)\n            if (data.rows === null) data.rows = []\n            if (props.APIRowsTransForm !== undefined) {\n                setTableData(props.APIRowsTransForm(data.rows))\n            } else setTableData(data.rows)\n            if (data.totalNum !== undefined && data.totalNum !== \"0\") {\n                setTotal(data.totalNum)\n                props.name && props.setTableInfo(props.name, {\n                    total: data.totalNum,\n                    pageNow: pn,\n                    pageSize: ps,\n                    searchKey: sk,\n                    moreProps: fmp\n                })\n            } else {\n                setTotal(ps * data.totalPage);\n                props.name && props.setTableInfo(props.name, {\n                    total: ps * data.totalPage,\n                    pageNow: pn,\n                    pageSize: ps,\n                    searchKey: sk,\n                    moreProps: fmp\n                })\n            }\n            setLoading(false)\n        })\n    }\n\n    useEffect(() => {\n        form.setFieldsValue(props.initRequestProps)\n        getInfo()\n    }, [props.name])\n\n    // 带有表单的筛选\n    const [form] = useForm()\n    const onFinish = () => {\n        const values = form.getFieldsValue()\n        if (JSON.stringify(values) !== \"{}\")\n            getInfo(1, PageSize, undefined, values)\n    };\n    const onReset = () => {\n        const values = form.getFieldsValue()\n        form.resetFields();\n        const tf = props.tableData[props.name]?.tableInfo\n        props.name && props.setTableInfo(props.name, {\n            total: tf.total,\n            pageNow: tf.pageNow,\n            pageSize: tf.pageSize,\n            searchKey: tf.searchKey,\n            moreProps: undefined\n        })\n        const valuesAfter = form.getFieldsValue()\n        // 重置前后若发生改变，则重新加载表格\n        if (JSON.stringify(values) !== JSON.stringify(valuesAfter))\n            getInfo(1, PageSize, undefined, undefined)\n\n    };\n\n\n    useEffect(() => {\n        // 监听表格的版本变化，当版本变更时更新表格\n        const propsTableVersion = props.tableData[props.name]?.tableVersion\n        if (propsTableVersion !== undefined && tableVersion !== propsTableVersion) {\n            // 如果数据被外部应用更新，则用 redux 中的数据更新当前行\n            if (propsTableVersion < 0) {\n                setTableVersion(-propsTableVersion)\n                setTableDataX(props.tableData[props.name]?.dataSource)\n            } else {\n                // 否则，重新进行请求\n                setTableVersion(propsTableVersion)\n                const values = form.getFieldsValue()\n                getInfo(PageNow, PageSize, searchText, values)\n            }\n        }\n    }, [props.tableData, tableVersion])\n\n    return (\n        <>\n            {props.useList && (\n                <Card\n                    title={props.title}\n                    bordered={true}\n                    size={\"default\"}\n                    className={props.cardProps ?? \"zeroBodyPaddingLeft\"}\n                    extra={\n                        (props.search === true || props.getForm !== undefined) && (\n                            <>\n                                {props.search === true && (\n                                    <Search\n                                        key={\"search\"}\n                                        placeholder={props.t(\"searchUser\")}\n                                        onSearch={(text) => {\n                                            setSearchText(text)\n                                            setPageNow(1)\n                                            const values = form.getFieldsValue()\n                                            getInfo(1, PageSize, text, values)\n                                        }}\n                                        enterButton\n                                        style={{width: 300}}\n                                    />\n                                )}\n                                {props.getForm !== undefined && (\n                                    <Form form={form}>\n                                        {props.getForm(onFinish)}\n                                        {props.useFormBtn && (\n                                            <Space style={{marginLeft: \"30px\"}} size={20}>\n                                                <Button type=\"primary\" onClick={onFinish}>\n                                                    筛选\n                                                </Button>\n                                                <Button htmlType=\"button\" onClick={onReset}>\n                                                    重置\n                                                </Button>\n                                            </Space>\n                                        )}\n                                    </Form>\n                                )}\n                            </>\n                        )\n                    }\n                >\n                    <List\n                        grid={props.grid}\n                        itemLayout={\"vertical\"}\n                        loading={loading}\n                        size={props.size}\n                        dataSource={tableData}\n                        renderItem={props.renderItem}\n                        pagination={{\n                            onChange: (page, pageSize) => {\n                                getInfo(page, pageSize)\n                            },\n                            current: PageNow,\n                            pageSize: PageSize,\n                            total: total,\n                            size: \"small\",\n                            hideOnSinglePage: true,\n                            showQuickJumper: true,\n                            showLessItems: true,\n                            showSizeChanger: ck(props.showSizeChanger, true),\n                            pageSizeOptions: [\"5\", \"15\", \"20\", \"50\", \"80\"],\n                        }}\n                    />\n                </Card>\n            )}\n            {!props.useList && (\n                <Card\n                    bordered={false}\n                    size={\"small\"}\n                    extra={\n                        (props.search === true || props.getForm !== undefined) && (\n                            <>\n                                {props.search === true && (\n                                    <Search\n                                        key={\"search\"}\n                                        placeholder={\"搜索\"}\n                                        onSearch={(text) => {\n                                            setSearchText(text)\n                                            setPageNow(1)\n                                            getInfo(1, PageSize, text)\n                                        }}\n                                        enterButton\n                                        style={{width: 300}}\n                                    />\n                                )}\n                                {props.getForm !== undefined && (\n                                    <Form form={form}>\n                                        {props.getForm(onFinish)}\n                                        <Space style={{marginLeft: \"30px\"}} size={20}>\n                                            <Button type=\"primary\" onClick={onFinish}>\n                                                {props.t(\"filtering\")}\n                                            </Button>\n                                            <Button htmlType=\"button\" onClick={onReset}>\n                                                {props.t(\"Reset\")}\n                                            </Button>\n                                        </Space>\n                                    </Form>\n                                )}\n                            </>\n                        )\n                    }\n                >\n                    <Table\n                        rowKey={props.rowKey}\n                        loading={loading}\n                        size={props.size}\n                        columns={props.columns}\n                        rowSelection={props.rowSelection}\n                        dataSource={tableData}\n                        pagination={props.pagination ?? {\n                            onChange: (page, pageSize) => {\n                                getInfo(page, pageSize)\n                            },\n                            current: PageNow,\n                            pageSize: PageSize,\n                            total: total,\n                            hideOnSinglePage: false,\n                            showQuickJumper: true,\n                            showLessItems: true,\n                            showSizeChanger: ck(props.showSizeChanger, true),\n                            pageSizeOptions: [\"5\", \"15\", \"20\", \"50\", \"80\"],\n                        }}\n                    />\n                </Card>\n            )}\n        </>\n    )\n\n}\n\nconst mapStateToProps = (state: any) => {\n    const UState: UserState = state.UserReducer\n    const TState: TableState = state.TableReduce\n    return {\n        roles: UState.userInfo?.roles,\n        tableData: {...TState.tableData}\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    setTableInfo: (name: string, data: any) => dispatch({\n        type: \"setTableInfo\",\n        name: name,\n        data: data\n    }),\n    setDataSource: (data: any, name: string) =>\n        dispatch({type: \"setDataSource\", data: data, name: name, add: false})\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(\n    withRouter(TableWithPagination)\n))\n\n","import {withTranslation} from \"react-i18next\";\nimport {Button, Card, Form, Input, message, Select, Space, Tooltip} from \"antd\";\nimport {SyncJudging} from \"../SyncJudging\";\nimport cApi from \"../../../Utils/API/c-api\";\nimport {ReloadOutlined} from \"@ant-design/icons\";\nimport {RunningResultList, StateList, SubmissionMap, TopSubmissionInfoType} from \"../../../Type/ISubmission\";\nimport TestCase from \"../TestCase\";\nimport React, {Dispatch, useState} from \"react\";\nimport moment from \"moment\";\nimport TableWithSelection from \"../../common/Table/TableWithSelection\";\nimport ReJudge from \"../Func/ReJudge\";\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router\";\nimport {TableState} from \"../../../Type/ITable\";\nimport {ck, isValueEmpty} from \"../../../Utils/empty\";\nimport {UserState} from \"../../../Type/Iuser\";\nimport judgeAuth from \"../../../Utils/judgeAhtu\";\nimport ModalSubmissionList from \"./ModalSubmissionList\";\n\nconst SubmissionList = (props: any) => {\n\n    // 为了动态显示评测点信息，使用 ws 与后端进行链接\n    // ws 是否打开\n    const [webSocketOpen, setWebSocketOpen] = useState<boolean>(false)\n    // ws 发送的信息（在打开时，当前数据的变更将同步发送至 ws）\n    const [webSocketQueryList, setWebSocketQueryList] = useState<string[]>([])\n    const [refreshDisable, setRefreshDisable] = useState<boolean>(false)\n\n    const selectedRowKeys = ck(props.tableData[props.name]?.selectedRowKeys, [])\n    const dataSource = ck(props.tableData[props.name]?.dataSource, [])\n\n    const addCaseInfo = (data: any[]) => {\n\n        const submissionIdHex = data[0]\n        const submissionVersion = data[1]\n        const checkpointType = data[2]\n        const checkpointIndex = data[3]\n        const checkpointId = data[4]\n        const judgeResult = data[5]\n        const judgeScore = data[6]\n        const usedTime = data[7]\n        const usedMemory = data[8]\n\n        let dt = dataSource\n        const Index = dt.findIndex((value: any) => value.submissionId === submissionIdHex)\n        if (Index === -1) return\n        if (checkpointIndex < 0) {\n            dt[Index].result = checkpointIndex.toString()\n            if (checkpointIndex === -1) {\n                dt[Index].result = judgeResult\n                dt[Index].score = judgeScore\n                dt[Index].usedTime = usedTime\n                dt[Index].usedMemory = usedMemory\n            }\n            // 检查还有没有未更新完的\n            let runningNumber = 0\n            for (const x of dt) if (parseInt(x.result) <= 0) runningNumber += 1\n            if (runningNumber === 0) setWebSocketOpen(false)\n        } else {\n            let nowID = 0\n            if (checkpointType === 0) {\n                nowID = checkpointIndex + 1\n            } else if (checkpointType === 1) {\n                nowID = dt[Index].checkpointNum + checkpointIndex + 1\n            }\n            if (dt[Index].RunningStep < nowID) {\n                dt[Index].RunningStep = nowID\n                dt[Index].score += judgeScore\n            }\n        }\n        props.setDataSource(dt, props.name)\n    }\n\n    const showSubmission = (record: any) => {\n        props.setTopSubmission(record.submissionId, {\n            title: record.problemTitle,\n            TimeLimit: record.timeLimit,\n            MemoryLimit: record.memoryLimit,\n            scoreMod: record.sumScore === undefined ? \"disable\" : \"show\",\n            sumScore: record.sumScore,\n            testcaseMod: \"show\",\n            QuerySubmissionAPI: props.QuerySubmissionAPI\n        })\n        props.setSubmissionModalVis(true)\n    }\n\n    const columns = [\n        {\n            title: props.t(\"results\"),\n            dataIndex: \"result\",\n            key: \"result\",\n            render: (text: any, record: any) => {\n                return (\n                    <div style={{cursor: 'pointer'}} onClick={() => {\n                        showSubmission(record)\n                    }}>\n                        <TestCase\n                            type={\"text\"}\n                            caseType={StateList.indexOf(SubmissionMap[text])}\n                            append={\n                                text === \"-2\" ?\n                                    \"(\" + record.RunningStep + \"/\" + (record.checkpointNum + record.publicCheckpointNum) + \")\"\n                                    : \"\"\n                            }\n                        />\n                    </div>\n\n                )\n            }\n        },\n        {\n            title: props.t(\"score\"),\n            dataIndex: \"score\",\n            key: \"score\",\n            render: (text: number, record: any) => {\n                if (record.sumScore === undefined)\n                    return text\n                return Math.floor(text / record.sumScore * 100) + \"%\"\n            }\n        },\n        {\n            title: props.t(\"submissionTime\"),\n            dataIndex: \"submitTime\",\n            key: \"submitTime\",\n            render: (text: any) => {\n                return (\n                    <Tooltip title={moment(text).format('YYYY-MM-DD HH:mm:ss')}>\n                        <span>{moment(text).fromNow()}</span>\n                    </Tooltip>\n                )\n            }\n        }\n    ]\n\n    const columnsAll = [\n        {\n            title: \"ID\",\n            dataIndex: \"submissionId\",\n            key: \"submissionId\",\n            render: (text: any, record: any) => {\n                return <Button type={\"link\"} size={\"small\"} onClick={() => {\n                    showSubmission(record)\n                }}>\n                    {text}\n                </Button>\n            }\n        },\n        {\n            title: props.t(\"username\"),\n            dataIndex: \"username\",\n            key: \"username\"\n        },\n        {\n            title: props.t(\"problemNo.\"),\n            dataIndex: \"problemCode\",\n            key: \"problemCode\",\n            render: props.problemCodeRender\n        },\n        {\n            title: props.t(\"problemName\"),\n            dataIndex: \"problemTitle\",\n            key: \"problemTitle\"\n        },\n        {\n            title: props.t(\"results\"),\n            dataIndex: \"result\",\n            key: \"result\",\n            width: 170,\n            render: (text: any, record: any) => {\n                return (\n                    <div style={{cursor: 'pointer'}} onClick={() => {\n                        showSubmission(record)\n                    }}>\n                        <TestCase\n                            type={\"text\"}\n                            caseType={StateList.indexOf(SubmissionMap[text])}\n                            append={\n                                text === \"-2\" ?\n                                    \"(\" + record.RunningStep + \"/\" + (record.checkpointNum + record.publicCheckpointNum) + \")\" :\n                                    \"\"\n                            }\n                        />\n                    </div>\n                )\n            }\n        },\n        {\n            title: props.t(\"score\"),\n            dataIndex: \"score\",\n            key: \"score\",\n            render: (text: number, record: any) => {\n                if (record.sumScore === undefined)\n                    return text\n                return Math.floor(text / record.sumScore * 100) + \"%\"\n            }\n        },\n        {\n            title: props.t(\"template\"),\n            dataIndex: \"judgeTemplateTitle\",\n            key: \"judgeTemplateTitle\"\n        },\n        {\n            title: props.t(\"memoryUsage\"),\n            dataIndex: \"usedMemory\",\n            key: \"usedMemory\",\n            render: (text: any) => {\n                return text + \" KB\"\n            }\n        },\n        {\n            title: props.t(\"timeUsage\"),\n            dataIndex: \"usedTime\",\n            key: \"usedTime\",\n            render: (text: any) => {\n                return text + \" ms\"\n            }\n        },\n        {\n            title: props.t(\"submissionTime\"),\n            dataIndex: \"submitTime\",\n            key: \"submitTime\",\n            render: (text: any) => {\n                return (\n                    <Tooltip title={moment(text).format('YYYY-MM-DD HH:mm:ss')}>\n                        <span>{moment(text).fromNow()}</span>\n                    </Tooltip>\n                )\n            }\n        }\n    ]\n\n    const getForm = (onFinish: any) => {\n        return (\n            <Space size={30}>\n                <Form.Item label={props.t(\"username\")} name={\"username\"}>\n                    <Input\n                        onPressEnter={(e: any) => {\n                            onFinish()\n                        }}\n                        allowClear\n                    />\n                </Form.Item>\n                <Form.Item label={props.t(\"problemNo.\")} name={\"problemCode\"}>\n                    <Input\n                        onPressEnter={(e: any) => {\n                            onFinish()\n                        }}\n                        allowClear\n                    />\n                </Form.Item>\n                <Form.Item label={props.t(\"JudgeResult\")} name={\"judgeResult\"}>\n                    <Select onChange={onFinish} allowClear style={{width: 200}}>\n                        {\n                            RunningResultList.map((value) => {\n                                return <Select.Option value={parseInt(value)}>\n                                    <TestCase type={\"text\"}\n                                              caseType={StateList.indexOf(SubmissionMap[value])}/>\n                                </Select.Option>\n                            })\n                        }\n                    </Select>\n                </Form.Item>\n            </Space>\n        )\n    }\n\n    const API = (data: any) => {\n        if (\"problemCode\" in data && !isValueEmpty(data[\"problemCode\"])) {\n            let v: string = data[\"problemCode\"]\n            if (v.length === 1) {\n                if (v.match(/^[a-z]$/) !== null) v = (v.charCodeAt(0) - 'a'.charCodeAt(0) + 1).toString()\n                if (v.match(/^[A-Z]$/) !== null) v = (v.charCodeAt(0) - 'A'.charCodeAt(0) + 1).toString()\n            } else if (v.match(/^[0-9]{4}$/) !== null) {\n                v = \"SDUOJ-\" + v\n            }\n            data[\"problemCode\"] = v\n        }\n        return props.API(data)\n    }\n\n    return (\n        <>\n            <Card\n                title={\n                    <Space>\n                        {props.title !== undefined ? props.title : props.t(\"submissionRecord\")}\n                        <SyncJudging\n                            open={webSocketOpen}\n                            dataHandle={addCaseInfo}\n                            queryList={webSocketQueryList}/>\n                    </Space>\n                }\n                style={props.lessInfo ? {} : {minWidth: 1200}}\n                className={props.lessInfo ? \"smallBodyPadding\" : \"\"}\n                extra={\n                    <Space>\n                        {props.lessInfo !== true && judgeAuth(props.roles, [\"admin\", \"superadmin\"]) && (\n                            <ReJudge\n                                API={cApi.rejudge}\n                                data={selectedRowKeys}\n                                afterSuccess={() => {\n                                    props.addTableVersion(props.name)\n                                    props.setSelectedRowKeys([], props.name)\n                                }}\n                            />\n                        )}\n                        <Button\n                            icon={<ReloadOutlined/>}\n                            onClick={() => {\n                                setRefreshDisable(true)\n                                props.addTableVersion(props.name)\n                                message.success(props.t(\"refreshSuccessfully\"))\n                                setTimeout(() => {\n                                    setRefreshDisable(false)\n                                }, 3000)\n                            }}\n                            disabled={refreshDisable}\n                        >\n                            {props.t(\"refresh\")}\n                        </Button>\n                    </Space>\n                }\n                actions={(props.lessInfo && props.isLogin) ? [\n                    <div>\n                        {props.lessInfo && props.isLogin && (\n                            <ModalSubmissionList\n                                btnProps={{type: \"text\", block: true}}\n                                btnText={props.t(\"ShowAllInformation\")}\n                                name={\"Pro-SubmissionList-\" + props.name}\n                                API={props.API}\n                                QuerySubmissionAPI={props.QuerySubmissionAPI}\n                            />\n                        )}\n                    </div>\n                ] : undefined}\n            >\n                <TableWithSelection\n                    disableSelection={props.lessInfo || !judgeAuth(props.roles, [\"admin\", \"superadmin\"])}\n                    defaultPageSize={props.lessInfo ? 5 : undefined}\n                    showSizeChanger={props.lessInfo ? false : undefined}\n                    pagination={props.lessInfo ? false : undefined}\n                    columns={props.lessInfo ? columns : columnsAll}\n                    getForm={props.useForm === true ? getForm : undefined}\n                    name={props.name}\n                    size={\"small\"}\n                    rowKey={\"submissionId\"}\n                    API={API}\n                    APIRowsTransForm={(value: any) => {\n                        if (isValueEmpty(value)) value = []\n                        let webSocketQueryList = []\n                        let data: any = []\n                        for (const x of value) {\n                            if (x.judgeResult <= 0) webSocketQueryList.push(x.submissionId)\n                            data.push({\n                                ...x,\n                                score: x.judgeScore,\n                                RunningStep: 0,\n                                result: x.judgeResult.toString(),\n                                // sumScore: ck(x.sumScore, 100),\n                                sumScore: x.sumScore,\n                                submitTime: parseInt(x.gmtCreate),\n                            })\n                        }\n                        if (webSocketQueryList.length !== 0) {\n                            setWebSocketOpen(true)\n                            setWebSocketQueryList(webSocketQueryList)\n                        }\n                        return data\n                    }}\n                />\n            </Card>\n        </>\n    )\n}\n\n\nconst mapStateToProps = (state: any) => {\n    const TState: TableState = state.TableReduce\n    const UState: UserState = state.UserReducer\n    return {\n        tableData: TState.tableData,\n        roles: UState.userInfo?.roles,\n        isLogin: UState.isLogin,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    addTableVersion: (name: string) => dispatch({\n        type: \"addTableVersion\",\n        name: name,\n    }),\n    setSelectedRowKeys: (data: React.Key[], name: string) =>\n        dispatch({type: \"setSelectedRowKeys\", data: data, name: name}),\n    setDataSource: (data: any, name: string) =>\n        dispatch({type: \"setDataSource\", data: data, name: name, add: true}),\n    setTopSubmission: (submissionID: string, submissionInfo: TopSubmissionInfoType) => dispatch({\n        type: \"setTopSubmission\",\n        submissionID: submissionID,\n        submissionInfo: submissionInfo\n    }),\n    setSubmissionModalVis: (data: boolean) => dispatch({type: \"setSubmissionModalVis\", data: data})\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(\n    withRouter(SubmissionList)\n))\n","import {Table} from \"antd\";\nimport React, {Dispatch, useEffect, useState} from \"react\";\nimport {connect} from \"react-redux\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router\";\nimport {TableState} from \"../../../Type/ITable\";\nimport {SizeType} from \"antd/lib/config-provider/SizeContext\";\nimport {ColumnsType} from \"antd/lib/table/interface\";\nimport {SortableContainer, SortableElement, SortableHandle} from \"react-sortable-hoc\";\nimport {MenuOutlined} from \"@ant-design/icons\";\nimport {arrayMoveImmutable} from \"array-move\";\n\nexport interface TableWithPaginationProps {\n    API: any                  // 表格查询数据的接口\n    size: SizeType            // 表格的大小\n    columns: ColumnsType<any> // 表格的列\n    name: string              // 表格名称\n    APIRowsTransForm?: any    // 针对API传输的数据进行转化的函数\n\n    // 面向 可选择的行 开放的接口\n    rowKey?: any              // 作为 key 记录的值\n\n}\n\nconst TableWithAllData = (props: any) => {\n    const [tableData, setTableDataX] = useState([])                            // 表格核心数据\n    const [loading, setLoading] = useState(true)                    // 表格的加载状态\n    const [tableVersion, setTableVersion] = useState<number>(0)     // 表格版本（控制表格刷新）\n    // const [sortSwitch, setSortSwitch] = useState<boolean>(false);           // 操作是否开启排序模式\n\n\n    const setTableData = (data: any) => {\n        setTableDataX(data)\n        // 若有 选中行 的相关配置，传递数据进行更新\n        if (props.setDataSource !== undefined && props.name !== undefined)\n            props.setDataSource(data, props.name)\n    }\n\n    const getInfo = () => {\n        setLoading(true)\n        props.API().then((data: any) => {\n            // console.log(\"data\", data)\n            if (data === null) data = []\n            if (props.APIRowsTransForm !== undefined) {\n                setTableData(props.APIRowsTransForm(data))\n            } else setTableData(data)\n            setLoading(false)\n        })\n    }\n\n    useEffect(() => {\n        getInfo()\n    }, [props.name])\n\n    useEffect(() => {\n        // 监听表格的版本变化，当版本变更时更新表格\n        const propsTableVersion = props.tableData[props.name]?.tableVersion\n        if (propsTableVersion !== undefined && tableVersion !== propsTableVersion) {\n            // 如果数据被外部应用更新，则用 redux 中的数据更新当前行\n            if (propsTableVersion < 0) {\n                setTableVersion(-propsTableVersion)\n                setTableDataX(props.tableData[props.name]?.dataSource)\n            } else {\n                // 否则，重新进行请求\n                setTableVersion(propsTableVersion)\n                getInfo()\n            }\n        }\n    }, [props.tableData, tableVersion])\n\n    // === 拖拽排序 ===\n    // 可拖拽的排序手柄\n    const DragHandle = SortableHandle(() => <MenuOutlined style={{cursor: 'grab', color: '#999'}}/>);\n    const SortableItem = SortableElement((props: any) => <tr {...props} />);\n    const XSortableContainer = SortableContainer((props: any) => <tbody {...props} />);\n    // 排序结束后\n    const onSortEnd = ({oldIndex, newIndex}: any) => {\n        // 当前排序是有效的\n        if (oldIndex !== newIndex) {\n            // 移动数组中的元素，并设置到当前的状态\n            setTableData(arrayMoveImmutable(tableData, oldIndex, newIndex))\n            props.afterDrag && props.afterDrag(tableData, oldIndex, newIndex)\n        }\n    };\n    const DraggableContainer = (props: any) => {\n        return (\n            <XSortableContainer\n                useDragHandle\n                disableAutoscroll\n                helperClass=\"row-dragging\"\n                onSortEnd={onSortEnd}\n                {...props}\n            />\n        )\n    }\n    const DraggableBodyRow = ({className, style, ...restProps}: any) => {\n        // function findIndex base on Table rowKey props and should always be a right array index\n        const index = tableData.findIndex((x: any) => x[props.rowKey] === restProps['data-row-key']);\n        return <SortableItem index={index} {...restProps} />\n    };\n    const sortColumns: any[] = [\n        {\n            title: \"\",\n            dataIndex: 'sort',\n            width: 50,\n            className: \"drag-visable\",\n            render: () => <DragHandle/>,\n        }\n    ]\n\n    let columns = props.columns;\n    if (props.useDrag) columns = sortColumns.concat(columns)\n\n    return (\n        <Table\n            {...props}\n            rowSelection={props.rowSelection}\n            rowKey={props.rowKey}\n            loading={loading}\n            size={props.size}\n            columns={columns}\n            dataSource={tableData}\n            pagination={false}\n            components={{\n                body: {\n                    wrapper: DraggableContainer,\n                    row: DraggableBodyRow,\n                },\n            }}\n        />\n    )\n\n}\n\nconst mapStateToProps = (state: any) => {\n    const TState: TableState = state.TableReduce\n    return {\n        tableData: {...TState.tableData}\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    setTableInfo: (name: string, data: any) => dispatch({\n        type: \"setTableInfo\",\n        name: name,\n        data: data\n    }),\n    setDataSource: (data: any, name: string) =>\n        dispatch({type: \"setDataSource\", data: data, name: name, add: false})\n})\n\nexport default React.memo(connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(withTranslation()(\n        withRouter(TableWithAllData))), (props: any, nextProps: any) => {\n        return props.columns === nextProps.columns &&\n            (props.rowSelection?.selectedRowKeys.length === nextProps.rowSelection?.selectedRowKeys.length) &&\n            props.tableData === nextProps.tableData &&\n            props.updateTrick ===  nextProps.updateTrick\n    }\n)\n\n","import React, {Component, Dispatch} from \"react\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router\";\nimport {connect} from \"react-redux\";\nimport TableWithPagination from \"./TableWithPagination\";\nimport {TableState} from \"../../../Type/ITable\";\nimport {ck} from \"../../../Utils/empty\";\nimport TableWithAllData from \"./TableWithAllData\";\n\n\nclass TableWithSelection extends Component<any, any> {\n\n    componentDidMount() {\n\n    }\n\n    setSelectedRowKeys = (data: any) =>{\n        this.props.setSelectedRowKeys(data, this.props.name)\n    }\n\n    render() {\n        const selectedRowKeys = ck(this.props.tableData[this.props.name]?.selectedRowKeys, [])\n        let rowSelection: any = {\n            selectedRowKeys,\n            onChange: (selectedRowKeys: React.Key[]) => {\n                this.setSelectedRowKeys(selectedRowKeys)\n            },\n            // 多选时的下拉选项\n            selections: [\n                {\n                    key: 'all',\n                    text: this.props.t(\"selectedAll\"),\n                    onSelect: (changeableRowKeys: React.Key[]) => {\n                        let newSelectedRowKeys = changeableRowKeys\n                        newSelectedRowKeys = newSelectedRowKeys.concat(selectedRowKeys.filter((key: React.Key) => {\n                            return !changeableRowKeys.includes(key);\n                        }))\n                        this.setSelectedRowKeys(newSelectedRowKeys)\n                    },\n                },\n                {\n                    key: 'clear',\n                    text: this.props.t(\"clear\"),\n                    onSelect: (changeableRowKeys: React.Key[]) => {\n                        let newSelectedRowKeys = selectedRowKeys.filter((key: React.Key) => {\n                            return !changeableRowKeys.includes(key);\n                        })\n                        this.setSelectedRowKeys(newSelectedRowKeys)\n                    },\n                },\n                {\n                    key: 'invert',\n                    text: this.props.t(\"invert\"),\n                    onSelect: (changeableRowKeys: React.Key[]) => {\n                        let newSelectedRowKeys = changeableRowKeys.filter((key:React.Key) => {\n                            return !selectedRowKeys.includes(key);\n                        });\n                        newSelectedRowKeys = newSelectedRowKeys.concat(selectedRowKeys.filter((key: React.Key) => {\n                            return !changeableRowKeys.includes(key);\n                        }))\n                        this.setSelectedRowKeys(newSelectedRowKeys)\n                    },\n                },\n            ]\n        };\n\n        return (\n            <>\n                {this.props.uesAlldata && (\n                    <TableWithAllData\n                        {... this.props}\n                        rowSelection={this.props.disableSelection ? undefined : rowSelection}\n                    />\n                )}\n                {this.props.uesAlldata !== true && (\n                    <TableWithPagination\n                        {... this.props}\n                        rowSelection={this.props.disableSelection ? undefined : rowSelection}\n                    />\n                )}\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    const TState: TableState = state.TableReduce\n    return {\n        tableData: TState.tableData\n    }\n\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    setSelectedRowKeys: (data: React.Key[], name: string) =>\n        dispatch({type: \"setSelectedRowKeys\", data: data, name: name}),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(\n    withRouter(TableWithSelection)\n))\n\n","import {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router-dom\";\nimport React, {useState} from \"react\";\nimport {Button, Modal} from \"antd\";\nimport SubmissionList from \"./SubmissionList\";\n\nconst ModalSubmissionList = (props: any) => {\n    const [ModalVis, setModalVis] = useState<boolean>(false);\n\n    return (\n        <>\n            <Button\n                {...props.btnProps}\n                onClick={() => {\n                    setModalVis(true)\n                }}\n            >\n                {props.btnText}\n            </Button>\n            <Modal\n                width={1250}\n                visible={ModalVis}\n                footer={false}\n                onCancel={() => {\n                    setModalVis(false)\n                }}\n            >\n                <SubmissionList\n                    {...props}\n                />\n            </Modal>\n        </>\n\n    )\n}\n\nexport default withTranslation()(withRouter(ModalSubmissionList))"],"sourceRoot":""}