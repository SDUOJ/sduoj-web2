{"version":3,"sources":["Component/common/Table/TableWithPagination.tsx","Component/common/Form/ModalFormUseForm.tsx","Utils/fileUpload.ts","Component/common/Form/Item/ItemTitle.tsx","Component/common/CodeEditor.tsx","Component/common/Form/Item/ItemText.tsx","Component/common/Form/Item/ItemCodeEditor.tsx","Component/common/Form/Item/ItemUpload.tsx","Component/judgeTemplate/Form/TemplateMForm.tsx","Pages/Manage/MJudgeTemplate.tsx"],"names":["connect","state","UState","UserReducer","TState","TableReduce","roles","userInfo","tableData","dispatch","setTableInfo","name","data","type","setDataSource","add","withTranslation","withRouter","props","useState","total","setTotal","setTableDataX","loading","setLoading","PageNow","setPageNow","ck","defaultPageSize","PageSize","setPageSize","searchText","setSearchText","tableVersion","setTableVersion","setTableData","undefined","getInfo","pageNow","pageSize","searchKey","moreProps","propsTableInfo","tableInfo","form","setFieldsValue","pn","ps","sk","fmp","getFieldsValue","API","then","rows","APIRowsTransForm","totalNum","totalPage","useEffect","initRequestProps","useForm","onFinish","values","JSON","stringify","onReset","resetFields","tf","valuesAfter","propsTableVersion","dataSource","useList","title","bordered","size","className","cardProps","extra","search","getForm","placeholder","t","onSearch","text","enterButton","style","width","useFormBtn","marginLeft","onClick","htmlType","grid","itemLayout","renderItem","pagination","onChange","page","current","hideOnSinglePage","showQuickJumper","showLessItems","showSizeChanger","pageSizeOptions","rowKey","columns","rowSelection","addTableVersion","addManageInitData","key","formMapRef","useRef","formVis","setFormVis","saveInitData","setSaveInitData","setCurrent","setTimeout","isValueEmpty","forEach","formInstanceRef","formName","submitData","submit","value","updateAppendProps","Object","assign","dataSubmitter","res","TableName","afterSubmit","onClose","message","success","subForm","length","validateFields","catch","error","btnProps","btnType","create","update","fork","batchUpdate","initData","hied","content","duration","dataLoader","paddingLeft","paddingRight","btnIcon","btnName","minWidth","destroyOnClose","visible","maskClosable","onCancel","footer","layout","initialValues","scrollToFirstError","preserve","component","onCurrentChange","currentPage","a","stepsFormRender","dom","submitter","map","item","index","StepForm","label","fileUpload","files","callback","formData","FormData","num","pros","md5Set","file","push","arrayBuffer","code","md5","CApi","getFileByMD5","Promise","resolve","append","all","uploadFile","fileUploadWithoutMD5","uploadSingleFile","Item","required","langMap","cpp","c","java","sql","python","CodeEditor","extensions","lang","height","readOnly","theme","githubLight","autoFocus","basicSetup","lineNumbers","autocompletion","syntaxHighlighting","tabSize","completionKeymap","lintKeymap","foldKeymap","searchKeymap","allowMultipleSelections","bracketMatching","initialValue","help","addonAfter","ItemEditor","UploadFile","nameList","accept","split","nm","id","filename","downloadFilename","downloadFileSuffix","marginBottom","path","apiAddress","CLIENT_SERVER","window","open","danger","multiple","action","listType","beforeUpload","ues","showUploadList","InboxOutlined","rules","ItemTitle","ItemText","mode","ItemCodeEditor","use","pathArray","location","pathname","colData","dataIndex","responsive","render","unix2Time","parseInt","mApi","getOneTemplate","updateTemplate","createTemplate","marginTop","overflow","paras","MApi","pageTemplateList"],"mappings":"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","file":"static/js/10.a60470c7.chunk.js","sourcesContent":["import {Button, Card, Form, List, Space, Table} from \"antd\";\nimport React, {Dispatch, useEffect, useState} from \"react\";\nimport {defaultPageSize} from \"../../../Config/constValue\";\nimport {UserState} from \"../../../Type/Iuser\";\nimport {connect} from \"react-redux\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router\";\nimport Search from \"antd/es/input/Search\";\nimport {TableState} from \"../../../Type/ITable\";\nimport {ck} from \"../../../Utils/empty\";\nimport {SizeType} from \"antd/lib/config-provider/SizeContext\";\nimport {ColumnsType} from \"antd/lib/table/interface\";\nimport {useForm} from \"antd/es/form/Form\";\n\nexport interface TableWithPaginationProps {\n    API: any                  // 表格查询数据的接口\n    size: SizeType            // 表格的大小\n    columns: ColumnsType<any> // 表格的列\n    name: string              // 表格名称\n    APIRowsTransForm?: any    // 针对API传输的数据进行转化的函数\n    search?: boolean          // 是否开启搜索功能\n    defaultPageSize?: number  // 表格默认的页大小\n\n    // 面向 可选择的行 开放的接口\n    // setDataSource?: any       // 输出当前表格的数据\n    rowKey?: any              // 作为 key 记录的值\n    rowSelection?: any        // 可选列的相关配置\n\n}\n\nconst TableWithPagination = (props: any) => {\n    const [total, setTotal] = useState<number>(0)                   // 项的总数\n    const [tableData, setTableDataX] = useState()                            // 表格核心数据\n    const [loading, setLoading] = useState(true)                    // 表格的加载状态\n    const [PageNow, setPageNow] = useState<number>(1)               // 当前的页码数\n    const [PageSize, setPageSize] = useState<number>(ck(props.defaultPageSize, defaultPageSize))         // 当前的页大小\n    const [searchText, setSearchText] = useState<string | undefined>()        // 搜索的文本\n    const [tableVersion, setTableVersion] = useState<number>(0)     // 表格版本（控制表格刷新）\n\n    const setTableData = (data: any) => {\n        setTableDataX(data)\n        // 若有 选中行 的相关配置，传递数据进行更新\n        if (props.setDataSource !== undefined && props.name !== undefined)\n            props.setDataSource(data, props.name)\n    }\n    // 这里的所有的参数都只能增量的修改，不能删除，删除需要手动更新 redux\n    const getInfo = (pageNow?: number, pageSize?: number, searchKey?: string, moreProps?: any) => {\n        const propsTableInfo = props.tableData[props.name]?.tableInfo\n        if (propsTableInfo !== undefined) {\n            if (moreProps === undefined && propsTableInfo.moreProps !== undefined){\n                form.setFieldsValue(propsTableInfo.moreProps)\n            }\n            pageNow = pageNow ?? propsTableInfo.pageNow\n            pageSize = pageSize ?? propsTableInfo.pageSize\n            searchKey = searchKey ?? propsTableInfo.searchKey\n            moreProps = moreProps ?? propsTableInfo.moreProps\n        }\n        let pn = pageNow ?? PageNow\n        let ps = pageSize ?? PageSize\n        let sk = searchKey ?? searchText\n        let fmp = moreProps ?? form.getFieldsValue()\n        setPageNow(pn)\n        setPageSize(ps)\n        setSearchText(sk)\n        setLoading(true)\n        props.API({\n            pageNow: pn,\n            pageSize: ps,\n            searchKey: sk,\n            ...fmp\n        }).then((data: any) => {\n            // console.log(\"data\", data)\n            if (data.rows === null) data.rows = []\n            if (props.APIRowsTransForm !== undefined) {\n                setTableData(props.APIRowsTransForm(data.rows))\n            } else setTableData(data.rows)\n            if (data.totalNum !== undefined && data.totalNum !== \"0\") {\n                setTotal(data.totalNum)\n                props.name && props.setTableInfo(props.name, {\n                    total: data.totalNum,\n                    pageNow: pn,\n                    pageSize: ps,\n                    searchKey: sk,\n                    moreProps: fmp\n                })\n            } else {\n                setTotal(ps * data.totalPage);\n                props.name && props.setTableInfo(props.name, {\n                    total: ps * data.totalPage,\n                    pageNow: pn,\n                    pageSize: ps,\n                    searchKey: sk,\n                    moreProps: fmp\n                })\n            }\n            setLoading(false)\n        })\n    }\n\n    useEffect(() => {\n        form.setFieldsValue(props.initRequestProps)\n        getInfo()\n    }, [props.name])\n\n    // 带有表单的筛选\n    const [form] = useForm()\n    const onFinish = () => {\n        const values = form.getFieldsValue()\n        if (JSON.stringify(values) !== \"{}\")\n            getInfo(1, PageSize, undefined, values)\n    };\n    const onReset = () => {\n        const values = form.getFieldsValue()\n        form.resetFields();\n        const tf = props.tableData[props.name]?.tableInfo\n        props.name && props.setTableInfo(props.name, {\n            total: tf.total,\n            pageNow: tf.pageNow,\n            pageSize: tf.pageSize,\n            searchKey: tf.searchKey,\n            moreProps: undefined\n        })\n        const valuesAfter = form.getFieldsValue()\n        // 重置前后若发生改变，则重新加载表格\n        if (JSON.stringify(values) !== JSON.stringify(valuesAfter))\n            getInfo(1, PageSize, undefined, undefined)\n\n    };\n\n\n    useEffect(() => {\n        // 监听表格的版本变化，当版本变更时更新表格\n        const propsTableVersion = props.tableData[props.name]?.tableVersion\n        if (propsTableVersion !== undefined && tableVersion !== propsTableVersion) {\n            // 如果数据被外部应用更新，则用 redux 中的数据更新当前行\n            if (propsTableVersion < 0) {\n                setTableVersion(-propsTableVersion)\n                setTableDataX(props.tableData[props.name]?.dataSource)\n            } else {\n                // 否则，重新进行请求\n                setTableVersion(propsTableVersion)\n                const values = form.getFieldsValue()\n                getInfo(PageNow, PageSize, searchText, values)\n            }\n        }\n    }, [props.tableData, tableVersion])\n\n    return (\n        <>\n            {props.useList && (\n                <Card\n                    title={props.title}\n                    bordered={true}\n                    size={\"default\"}\n                    className={props.cardProps ?? \"zeroBodyPaddingLeft\"}\n                    extra={\n                        (props.search === true || props.getForm !== undefined) && (\n                            <>\n                                {props.search === true && (\n                                    <Search\n                                        key={\"search\"}\n                                        placeholder={props.t(\"searchUser\")}\n                                        onSearch={(text) => {\n                                            setSearchText(text)\n                                            setPageNow(1)\n                                            const values = form.getFieldsValue()\n                                            getInfo(1, PageSize, text, values)\n                                        }}\n                                        enterButton\n                                        style={{width: 300}}\n                                    />\n                                )}\n                                {props.getForm !== undefined && (\n                                    <Form form={form}>\n                                        {props.getForm(onFinish)}\n                                        {props.useFormBtn && (\n                                            <Space style={{marginLeft: \"30px\"}} size={20}>\n                                                <Button type=\"primary\" onClick={onFinish}>\n                                                    筛选\n                                                </Button>\n                                                <Button htmlType=\"button\" onClick={onReset}>\n                                                    重置\n                                                </Button>\n                                            </Space>\n                                        )}\n                                    </Form>\n                                )}\n                            </>\n                        )\n                    }\n                >\n                    <List\n                        grid={props.grid}\n                        itemLayout={\"vertical\"}\n                        loading={loading}\n                        size={props.size}\n                        dataSource={tableData}\n                        renderItem={props.renderItem}\n                        pagination={{\n                            onChange: (page, pageSize) => {\n                                getInfo(page, pageSize)\n                            },\n                            current: PageNow,\n                            pageSize: PageSize,\n                            total: total,\n                            size: \"small\",\n                            hideOnSinglePage: true,\n                            showQuickJumper: true,\n                            showLessItems: true,\n                            showSizeChanger: ck(props.showSizeChanger, true),\n                            pageSizeOptions: [\"5\", \"15\", \"20\", \"50\", \"80\"],\n                        }}\n                    />\n                </Card>\n            )}\n            {!props.useList && (\n                <Card\n                    bordered={false}\n                    size={\"small\"}\n                    extra={\n                        (props.search === true || props.getForm !== undefined) && (\n                            <>\n                                {props.search === true && (\n                                    <Search\n                                        key={\"search\"}\n                                        placeholder={\"搜索\"}\n                                        onSearch={(text) => {\n                                            setSearchText(text)\n                                            setPageNow(1)\n                                            getInfo(1, PageSize, text)\n                                        }}\n                                        enterButton\n                                        style={{width: 300}}\n                                    />\n                                )}\n                                {props.getForm !== undefined && (\n                                    <Form form={form}>\n                                        {props.getForm(onFinish)}\n                                        <Space style={{marginLeft: \"30px\"}} size={20}>\n                                            <Button type=\"primary\" onClick={onFinish}>\n                                                {props.t(\"filtering\")}\n                                            </Button>\n                                            <Button htmlType=\"button\" onClick={onReset}>\n                                                {props.t(\"Reset\")}\n                                            </Button>\n                                        </Space>\n                                    </Form>\n                                )}\n                            </>\n                        )\n                    }\n                >\n                    <Table\n                        rowKey={props.rowKey}\n                        loading={loading}\n                        size={props.size}\n                        columns={props.columns}\n                        rowSelection={props.rowSelection}\n                        dataSource={tableData}\n                        pagination={props.pagination ?? {\n                            onChange: (page, pageSize) => {\n                                getInfo(page, pageSize)\n                            },\n                            current: PageNow,\n                            pageSize: PageSize,\n                            total: total,\n                            hideOnSinglePage: false,\n                            showQuickJumper: true,\n                            showLessItems: true,\n                            showSizeChanger: ck(props.showSizeChanger, true),\n                            pageSizeOptions: [\"5\", \"15\", \"20\", \"50\", \"80\"],\n                        }}\n                    />\n                </Card>\n            )}\n        </>\n    )\n\n}\n\nconst mapStateToProps = (state: any) => {\n    const UState: UserState = state.UserReducer\n    const TState: TableState = state.TableReduce\n    return {\n        roles: UState.userInfo?.roles,\n        tableData: {...TState.tableData}\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    setTableInfo: (name: string, data: any) => dispatch({\n        type: \"setTableInfo\",\n        name: name,\n        data: data\n    }),\n    setDataSource: (data: any, name: string) =>\n        dispatch({type: \"setDataSource\", data: data, name: name, add: false})\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(\n    withRouter(TableWithPagination)\n))\n\n","import React, {Dispatch, useEffect, useRef, useState} from \"react\";\nimport {connect} from \"react-redux\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router\";\nimport {Button, Form, message, Modal} from \"antd\";\nimport {ButtonType} from \"antd/lib/button/button\";\nimport {EditOutlined, PlusOutlined} from \"@ant-design/icons\";\nimport {ck, isValueEmpty} from \"../../../Utils/empty\";\nimport {useForm} from \"antd/es/form/Form\";\nimport {ProFormInstance, StepsForm} from \"@ant-design/pro-form\";\n\ninterface subFormType {\n    component: any\n    label: string\n}\n\ninterface ModalFormProps {\n    // 表单类型\n    type: \"create\" | \"update\" | \"batchUpdate\"\n    // 初始化数据，必须包含 initData 或 dataLoader 之一\n    initData?: { [key: string]: {} }\n    dataLoader?: () => Promise<any>   // 异步数据加载\n    dataSubmitter: (data: any) => Promise<any>\n    afterSubmit?: () => any                      // 提交完成之后的回调\n    updateAppendProps?: { [key: string]: any }\n\n    title: string           // 弹窗标题\n    TableName?: string      // 若有需要更新的表格，其名称\n    className?: any          // 类名\n    subForm: subFormType[]  // 子表单信息\n    btnProps?: any\n    layout?: any,\n    onClose?: any   // 关闭时进行回调\n}\n\nconst ModalForm = (props: ModalFormProps & any) => {\n\n    const [form] = useForm()\n    const formMapRef = useRef<React.MutableRefObject<ProFormInstance<any> | undefined>[]>([]);\n    const [formVis, setFormVis] = useState<boolean>(false)\n    const [saveInitData, setSaveInitData] = useState();\n    const [current, setCurrent] = useState<number>(0)\n\n    const BtnTypeMap: { [key: string]: ButtonType } = {\n        create: \"primary\",\n        update: \"link\",\n        fork: \"link\",\n        batchUpdate: \"primary\"\n    }\n\n\n    const loadData = () => {\n        if (props.type === \"update\" || props.type === \"fork\") {\n            // 若初始化信息为空，则调用数据加载器进行异步数据加载\n            if (props.initData === undefined) {\n                const hied = message.loading({\n                    content: \"加载中\",\n                    duration: 0,\n                })\n                if (props.dataLoader === undefined) {\n                    hied()\n                    message.error(\"未定义数据加载器\")\n                    return\n                }\n                props.dataLoader && props.dataLoader().then((data: any) => {\n                    // console.log(\"dataLoaderData\", data)\n                    setSaveInitData(data)\n                    // if (props.subForm.length !== 1) {\n                    // } else form.setFieldsValue(data)\n                    hied()\n                    setFormVis(true)\n                }).catch(() => {\n                    hied()\n                })\n            } else {\n                // 否则直接进行数据加载\n                // console.log(\"initData\",props.initData)\n                setSaveInitData(props.initData)\n                setFormVis(true)\n            }\n        } else if (props.type === \"create\") {\n            if (props.initData !== undefined) {\n                setSaveInitData(props.initData)\n            }\n            setFormVis(true)\n        } else {\n            setFormVis(true)\n        }\n    }\n\n    // 当表单的可见性发生改变时，维护表单信息\n    useEffect(() => {\n        // 延迟向表单注入信息\n        setTimeout(() => {\n            !isValueEmpty(formMapRef.current) && formMapRef.current.forEach((formInstanceRef) => {\n                formInstanceRef.current?.setFieldsValue(saveInitData);\n            });\n            form && form.setFieldsValue(saveInitData)\n        }, 100)\n\n        // 当表单消失时，清除相关数据\n        if (!formVis) {\n            setCurrent(0)\n            formMapRef.current.forEach((formInstanceRef) => {\n                formInstanceRef.current?.resetFields()\n            });\n            props.formName && props.addManageInitData(props.formName, undefined)\n        }\n    }, [formVis, saveInitData])\n\n    useEffect(() => {\n        props.formName && props.addManageInitData(props.formName, saveInitData)\n    }, [saveInitData])\n\n    // 提交数据\n    const submitData = (values: any) => {\n        const submit = (value: any) => {\n            // console.log(\"inner\", value)\n            // 在提交表单数据之前，追加数据\n            props.updateAppendProps && Object.assign(value, props.updateAppendProps)\n            props.dataSubmitter(value).then((res: any) => {\n                // 当数据绑定表格时，更新表格数据\n                props.TableName && props.addTableVersion(props.TableName)\n                props.afterSubmit && props.afterSubmit(res)\n                props.onClose && props.onClose()\n                setFormVis(false)\n                message.success(\"成功\")\n            })\n        }\n\n        if (props.subForm.length === 1) {\n            // 只有一页的表单，需要手动进行验证\n            // console.log(form)\n            form.validateFields().then((value) => {\n                submit(value)\n            }).catch(() => {\n                message.error('表单不完整')\n            })\n        } else submit(values)\n    }\n\n    return (\n        <>\n            <Button\n                {...props.btnProps}\n                type={ck(props.btnType, BtnTypeMap[props.type])}\n                onClick={loadData}\n                style={\n                    (props.type === \"fork\" || props.type === \"update\" || props.btnType === \"link\") ? {\n                        paddingLeft: 5,\n                        paddingRight: 5\n                    } : undefined\n                }\n            >\n                {(() => {\n                    if (props.btnIcon !== false) {\n                        if (props.type === \"create\") return <PlusOutlined/>\n                        if (props.type === \"batchUpdate\") return <EditOutlined/>\n                    }\n                })()}\n                {(() => {\n                    if (props.btnName !== undefined)\n                        return props.btnName\n                    switch (props.type) {\n                        case \"create\":\n                            return props.t(\"create\")\n                        case \"update\":\n                            return props.t(\"Edit\")\n                        case \"fork\":\n                            return \"克隆\"\n                        default:\n                            return \"批量修改\"\n                    }\n                })()}\n            </Button>\n            {props.subForm.length === 1 && (\n                <Modal\n                    width={props.width}\n                    style={{minWidth: props.width}}\n                    destroyOnClose={true}\n                    title={props.title}\n                    className={props.className}\n                    visible={formVis}\n                    maskClosable={false}\n                    onCancel={() => {\n                        props.onClose && props.onClose()\n                        setFormVis(false)\n                    }}\n                    footer={[\n                        <Button type=\"primary\" key=\"submit\" onClick={submitData}>\n                            {props.t(\"Submit\")}\n                        </Button>\n                    ]}\n                >\n                    <Form\n                        form={form}\n                        layout={props.layout ?? \"vertical\"}\n                        initialValues={props.initData}\n                        scrollToFirstError\n                        preserve={false}\n                    >\n                        {props.subForm[0].component}\n                    </Form>\n                </Modal>\n            )}\n            {props.subForm.length !== 1 && (\n                <StepsForm\n                    current={current}\n                    onCurrentChange={(currentPage: number) => {\n                        setCurrent(currentPage)\n                    }}\n                    formMapRef={formMapRef}\n                    onFinish={async (values) => {\n                        submitData(values)\n                    }}\n                    stepsFormRender={(dom, submitter) => {\n                        return (\n                            <Modal\n                                destroyOnClose={true}\n                                title={props.title}\n                                className={props.className}\n                                visible={formVis}\n                                maskClosable={false}\n                                width={props.width ?? 1200}\n                                style={{minWidth: props.width}}\n                                onCancel={() => {\n                                    props.onClose && props.onClose()\n                                    setFormVis(false)\n                                }}\n                                footer={submitter}\n                            >\n                                {dom}\n                            </Modal>\n                        );\n                    }}\n                >\n                    {props.subForm.map((item: any, index: number) => {\n                        return (\n                            <StepsForm.StepForm\n                                layout={props.layout ?? \"vertical\"}\n                                name={\"step\" + index}\n                                title={item.label}\n                                onFinish={async () => {\n                                    return true;\n                                }}\n                            >\n                                {item.component}\n                            </StepsForm.StepForm>\n                        )\n                    })}\n                </StepsForm>\n\n            )}\n        </>\n    )\n}\n\nconst mapStateToProps = () => {\n    return {}\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({\n    addTableVersion: (name: string) => dispatch({type: \"addTableVersion\", name: name}),\n    addManageInitData: (key: string, data: any) => dispatch({type: \"addManageInitData\", key: key, data: data})\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(\n    withRouter(ModalForm)\n))\n","import CApi from \"Utils/API/c-api\"\nimport md5 from \"js-md5\";\n\nexport const fileUpload = (files: File[], callback: any) => {\n    let formData = new FormData();\n    let num = 0\n    let pros: Promise<any>[] = []\n    let md5Set: Promise<any>[] = []\n    files.forEach((file) => {\n        md5Set.push(\n            file.arrayBuffer().then(((value) => {\n                let code = md5(value)\n                pros.push(\n                    CApi.getFileByMD5({md5: code}).then((value: any) => {\n                        if (value !== null) {\n                            callback(value)\n                            return Promise.resolve()\n                        } else {\n                            formData.append(\"files\", file);\n                            num += 1;\n                            return Promise.resolve()\n                        }\n                    })\n                )\n                return Promise.resolve()\n            }))\n        )\n    });\n\n    Promise.all(md5Set).then(() => {\n        Promise.all(pros).then(() => {\n            if (num !== 0) {\n                CApi.uploadFile(formData).then((data: any) => {\n                    data.map((value: any) => {\n                        callback(value)\n                        return undefined\n                    })\n                })\n            }\n        })\n    })\n}\n\nexport const fileUploadWithoutMD5 = (file: File, callback: any) => {\n    let formData = new FormData();\n    formData.append(\"file\", file);\n    CApi.uploadSingleFile(formData).then((data: any) => {\n        callback(data)\n        return undefined\n    })\n}","import {Form, Input} from \"antd\";\nimport React from \"react\";\nimport {withTranslation} from \"react-i18next\";\n\nconst ItemTitle = (props: any) => {\n    return (\n        <>\n            <Form.Item label={props.label ?? props.t(\"title\")} name={props.name ?? \"title\"} required={true}>\n                <Input/>\n            </Form.Item>\n        </>\n    )\n}\n\nexport default withTranslation()(ItemTitle)\n","import CodeMirror from '@uiw/react-codemirror';\nimport {githubLight} from '@uiw/codemirror-theme-github';\nimport {cpp} from '@codemirror/lang-cpp';\nimport {java} from '@codemirror/lang-java';\nimport {sql} from '@codemirror/lang-sql';\nimport {python} from '@codemirror/lang-python';\n\n\ninterface ICodeEditor {\n    lang: \"c\" | \"cpp\" | \"java\" | \"sql\" | \"python\" | \"text\"\n    code?: string\n    value?: string\n    className?: string\n    onChange?: any\n    readOnly?: boolean\n\n}\n\n\nconst langMap = {\n    cpp: cpp,\n    c: cpp,\n    java: java,\n    sql: sql,\n    python: python,\n}\n\nconst CodeEditor = (props: ICodeEditor) => {\n\n    let extensions: any = []\n    if (props.lang !== \"text\") {\n        extensions = [(langMap[props.lang])()]\n    }\n\n    return (\n        <>\n            <CodeMirror\n                value={props.value}\n                height={\"400px\"}\n                readOnly={props.readOnly ?? false}\n                theme={githubLight}\n                autoFocus={true}\n                extensions={extensions}\n                basicSetup={{\n                    lineNumbers: true,\n                    autocompletion: true,\n                    syntaxHighlighting: true,\n                    tabSize: 4,\n                    completionKeymap: true,\n                    lintKeymap: true,\n                    foldKeymap: true,\n                    searchKeymap: true,\n                    allowMultipleSelections: true,\n                    bracketMatching: true\n                }}\n                // options={{\n                //     indentUnit: 4,\n                //     smartIndent: true,\n                //     lineWrapping: true,\n                //     autoRefresh: true,\n                //     electricChars: true\n                // }}\n                onChange={(value) => {\n                    props.onChange && props.onChange(value)\n                }}\n            />\n        </>\n    )\n\n}\n\nexport default CodeEditor\n","import {Form, Input} from \"antd\";\nimport React from \"react\";\nimport {withTranslation} from \"react-i18next\";\n\nconst ItemText = (props: any) => {\n    return (\n        <>\n            <Form.Item\n                label={props.label}\n                name={props.name}\n                required={props.required ?? true}\n                initialValue={props.initialValue}\n                help={props.help}\n            >\n                <Input addonAfter={props.addonAfter}/>\n            </Form.Item>\n        </>\n    )\n}\n\nexport default withTranslation()(ItemText)","import {Form} from \"antd\";\nimport CodeEditor from \"../../CodeEditor\";\n\nconst ItemEditor = (props: any) => {\n    return (\n\n        <Form.Item label={props.label} name={props.name} {...props}>\n            <CodeEditor lang={props.lang}/>\n        </Form.Item>\n    )\n}\n\nexport default ItemEditor","import {Button, Form, Space} from \"antd\";\nimport React from \"react\";\nimport {withTranslation} from \"react-i18next\";\nimport {InboxOutlined} from \"@ant-design/icons\";\nimport Dragger from \"antd/lib/upload/Dragger\";\nimport {isValueEmpty} from \"../../../../Utils/empty\";\nimport apiAddress from \"../../../../Utils/API/apiAddress\";\nimport {fileUpload, fileUploadWithoutMD5} from \"../../../../Utils/fileUpload\";\n\ninterface ItemUploadPropsType{\n    label: string       // Form 标签\n    name: string        // Form 字段\n    required: boolean   // Form 必要性校验\n    accept: string      // 可接受的文件类型\n    use: \"user\" | \"admin\"       // 上传文件着\n    downloadFilename?: string    // 下载时的文件名\n    downloadFileSuffix: string  // 下载的文件后缀\n}\n\nconst ItemUpload = (props: ItemUploadPropsType & any) => {\n\n    return (\n        <>\n            <Form.Item label={props.label ?? \"上传文件\"} name={props.name} rules={[{required: props.required}]}>\n                <UploadFile {...props}/>\n            </Form.Item>\n        </>\n    )\n}\n\n\n\nconst UploadFile = (props: any) => {\n\n    const {value, onChange} = props\n\n    let nameList: string[] = []\n    for (let nm of props.accept.split(\",\")) {\n        nameList.push(\"*\" + nm)\n    }\n\n    const callback = (value: any) => {\n        onChange(value.id)\n    }\n    const upload = (file: any) => {\n        if (props.ues === \"user\")\n            fileUploadWithoutMD5(file, callback)\n        else fileUpload([file], callback)\n    }\n\n    const filename = (props.downloadFilename ?? value) + props.downloadFileSuffix;\n\n    return (\n        <>\n            {!isValueEmpty(value) && (\n                <div style={{marginBottom: 24}}>\n                    <div> 已有文件： </div>\n                    <Space>\n                        {filename}\n                        <Button size={\"small\"} onClick={() => {\n                            const path = apiAddress().CLIENT_SERVER + \"/api/filesys/download/\" + value + \"/\" + filename\n                            window.open(path)\n                        }}>下载</Button>\n                        <Button danger size={\"small\"} onClick={() => {\n                            onChange(null)\n                        }}>删除</Button>\n                    </Space>\n\n                </div>\n            )}\n            <Dragger\n                multiple={false}\n                accept={props.accept}\n                action=\"\"\n                listType=\"text\"\n                beforeUpload={upload}\n                showUploadList={false}\n            >\n                <p className=\"ant-upload-drag-icon\">\n                    <InboxOutlined/>\n                </p>\n                <p className=\"ant-upload-text\">单击或拖动文件到此区域进行上传</p>\n                <p className=\"ant-upload-hint\">\n                    请上传一个 {nameList} 文件\n                </p>\n            </Dragger>\n        </>\n    )\n}\n\nexport default withTranslation()(ItemUpload)\n","import {withTranslation} from \"react-i18next\";\nimport ItemTitle from \"../../common/Form/Item/ItemTitle\";\nimport ItemText from \"../../common/Form/Item/ItemText\";\nimport {Form, Select} from \"antd\";\nimport ItemCodeEditor from \"../../common/Form/Item/ItemCodeEditor\";\nimport ItemUpload from \"../../common/Form/Item/ItemUpload\";\n\nconst TemplateMForm = (props: any) => {\n    return (\n        <>\n            <ItemTitle/>\n            <ItemText label={\"备注\"} name={\"comment\"} required={false}/>\n            <Form.Item label={\"文件后缀\"} name={\"acceptFileExtensions\"} required>\n                <Select mode=\"tags\" style={{ width: '100%' }} />\n            </Form.Item>\n            <ItemCodeEditor\n                label={\"shell脚本\"}\n                name={\"shellScript\"}\n                lang={\"cpp\"}\n                className={\"JudgeTemplateCodeEditor\"}\n                rules={[{required: true}]}\n            />\n            <ItemUpload\n                label={\"ZIP资源文件\"}\n                name={\"zipFileId\"}\n                required={false}\n                accept={\".zip\"}\n                use={\"admin\"}\n                downloadFileSuffix={\".zip\"}\n            />\n\n        </>\n    )\n}\n\nexport default withTranslation()(TemplateMForm)\n","import React from \"react\";\nimport {Card, Space} from \"antd\";\nimport MApi from \"../../Utils/API/m-api\";\nimport mApi from \"../../Utils/API/m-api\";\nimport {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router-dom\";\nimport TableWithPagination from \"../../Component/common/Table/TableWithPagination\";\nimport {unix2Time} from \"../../Utils/Time\";\nimport ModalFormUseForm from \"../../Component/common/Form/ModalFormUseForm\";\nimport TemplateMForm from \"../../Component/judgeTemplate/Form/TemplateMForm\";\n\nconst MJudgeTemplate = (props: any) => {\n    const pathArray = props.location.pathname.split(\"/\")\n    const type = pathArray[pathArray.length - 1]\n\n    let colData: any[] = [\n        {\n            title: \"ID\",\n            dataIndex: \"id\",\n            width: 50,\n            responsive: [\"lg\", \"sm\", \"xs\"]\n        },\n        {\n            title: props.t(\"Owner\"),\n            dataIndex: \"username\",\n            width: \"auto\",\n            responsive: [\"lg\"],\n        },\n        {\n            title: props.t(\"title\"),\n            dataIndex: \"title\",\n            width: \"auto\",\n            responsive: [\"lg\", \"sm\"],\n        },\n        {\n            title: props.t(\"comment\"),\n            dataIndex: \"comment\",\n            width: \"auto\",\n            responsive: [\"lg\"],\n        },\n        {\n            title: props.t(\"CreateTime\"),\n            dataIndex: \"gmtCreate\",\n            width: \"auto\",\n            responsive: [\"lg\", \"sm\"],\n            render: (text: string) => {\n                return unix2Time(parseInt(text))\n            }\n        },\n        {\n            title: props.t(\"ModifiedTime\"),\n            dataIndex: \"gmtModified\",\n            width: \"auto\",\n            responsive: [\"lg\", \"sm\"],\n            render: (text: string) => {\n                return unix2Time(parseInt(text))\n            }\n        },\n        {\n            title: props.t(\"operator\"),\n            width: \"150px\",\n            render: (text: any, rows: any) => {\n                return <Space size={3}>\n                    <ModalFormUseForm\n                        TableName={`TemplateList-${type}`}\n                        width={600}\n                        title={rows.title}\n                        type={\"update\"}\n                        subForm={[\n                            {\n                                component: <TemplateMForm/>,\n                                label: \"\"\n                            },\n                        ]}\n                        dataLoader={async () => {\n                            return mApi.getOneTemplate({id: rows.id}).then((value: any) => {\n                                return Promise.resolve(value)\n                            })\n                        }}\n                        updateAppendProps={{id: rows.id}}\n                        dataSubmitter={(value: any) => {\n                            return mApi.updateTemplate({type: type === \"io\" ? 0 : 2, ...value})\n                        }}\n                    />\n                    <ModalFormUseForm\n                        TableName={`TemplateList-${type}`}\n                        width={600}\n                        title={\"新建模板(克隆自\" + rows.title + \")\"}\n                        type={\"fork\"}\n                        subForm={[\n                            {\n                                component: <TemplateMForm/>,\n                                label: \"\"\n                            },\n                        ]}\n                        dataLoader={async () => {\n                            return mApi.getOneTemplate({id: rows.id}).then((value: any) => {\n                                return Promise.resolve(value)\n                            })\n                        }}\n                        dataSubmitter={(value: any) => {\n                            return mApi.createTemplate({type: type === \"io\" ? 0 : 2, ...value})\n                        }}\n                    />\n                </Space>\n            }\n        }\n    ]\n\n    return (\n        <div style={{marginTop: -20, overflow: \"hidden\"}}>\n            <Card\n                size={\"small\"}\n                bordered={true}\n                title={type === \"io\" ? \"基础IO模板\" : \"高阶评测模板\"}\n                extra={\n                    <>\n                        <ModalFormUseForm\n                            TableName={`TemplateList-${type}`}\n                            width={600}\n                            title={\"新建模板\"}\n                            type={\"create\"}\n                            subForm={[\n                                {\n                                    component: <TemplateMForm/>,\n                                    label: \"\"\n                                },\n                            ]}\n                            dataSubmitter={(value: any) => {\n                                return mApi.createTemplate({type: type === \"io\" ? 0 : 2, ...value})\n                            }}\n                        />\n                    </>\n                }\n            >\n                <TableWithPagination\n                    name={`TemplateList-${type}`}\n                    columns={colData}\n                    API={(paras: any) => {\n                        return MApi.pageTemplateList({...paras, type: type === \"io\" ? 0 : 2})\n                    }}\n                    size={\"small\"}\n                    rowKey={\"id\"}\n                />\n            </Card>\n        </div>\n    )\n\n}\n\nexport default withTranslation()(withRouter(MJudgeTemplate))\n"],"sourceRoot":""}