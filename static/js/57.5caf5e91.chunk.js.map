{"version":3,"sources":["Component/contest/Overview.tsx"],"names":["connect","state","ContestInfo","ContestReducer","contestInfo","dispatch","withTranslation","withRouter","props","contestId","match","params","style","textAlign","margin","maxWidth","className","size","dataSource","problems","pagination","columns","key","title","dataIndex","render","text","String","fromCharCode","charCodeAt","parseInt","t","row","isValueEmpty","problemColor","backgroundColor","type","onClick","history","push","UrlPrefix","problemCode","acceptNum","submitNum","caseType","StateList","indexOf","SubmissionMap"],"mappings":"kGAAA,oGAmGeA,uBATS,SAACC,GAErB,MAAO,CACHC,YAFwBD,EAAME,eAEXC,gBAIA,SAACC,GAAD,MAA8B,KAE1CL,CAGbM,cAAkBC,aA3FH,SAACC,GAEd,IAAMC,EAAYD,EAAME,MAAMC,OAAOF,UAC/BL,EAAcI,EAAMN,YAAYO,GAEtC,OACI,mCACI,qBAAKG,MAAO,CAACC,UAAW,SAAUC,OAAQ,UAA1C,SACI,qBAAKF,MAAO,CAACC,UAAW,OAAQE,SAAU,SAAUD,OAAQ,UAA5D,SACI,cAAC,IAAD,CACIE,UAAW,iBACXC,KAAM,SACNC,WAAU,OAAEd,QAAF,IAAEA,OAAF,EAAEA,EAAae,SACzBC,YAAY,EACZC,QAAS,CACL,CACIC,IAAK,KACLC,MAAO,KACPC,UAAW,cACXC,OAAQ,SAACC,GACL,OAAOC,OAAOC,aAAa,IAAIC,WAAW,GAAKC,SAASJ,GAAQ,KAGxE,CACIJ,IAAK,QACLC,MAAOf,EAAMuB,EAAE,SACfP,UAAW,eACXC,OAAQ,SAACC,EAAMM,GACX,OACI,sCACMC,YAAaD,EAAIE,eACf,sBAAMlB,UAAW,SAAUJ,MAAO,CAACuB,gBAAiBH,EAAIE,gBAE5D,cAAC,IAAD,CAAQE,KAAM,OAAQnB,KAAM,QAASoB,QAAS,WAC1C7B,EAAM8B,QAAQC,KAAKC,IAAY,YAAc/B,EAAY,YAAcuB,EAAIS,cAD/E,SAEIf,SAKpB,CACIJ,IAAK,aACLC,MAAO,8BACPE,OAAQ,SAACC,EAAMM,GACX,OACI,qCACKA,EAAIU,UADT,MACuBV,EAAIW,eAKvC,CACIrB,IAAK,QACLC,MAAOf,EAAMuB,EAAE,UACfP,UAAW,cACXC,OAAQ,SAACC,GACL,OAAa,OAATA,EAAsB,6BAEtB,cAAC,IAAD,CAAUU,KAAM,OACNQ,SAAUC,IAAUC,QAAQC,IAAcrB,QAIhE,CACIJ,IAAK,QACLC,MAAOf,EAAMuB,EAAE,SACfP,UAAW","file":"static/js/57.5caf5e91.chunk.js","sourcesContent":["import {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router-dom\";\nimport {Button, Table} from \"antd\";\nimport React, {Dispatch} from \"react\";\nimport {connect} from \"react-redux\";\nimport {ContestState} from \"../../Redux/Action/contest\";\nimport {isValueEmpty} from \"../../Utils/empty\";\nimport TestCase from \"../submission/TestCase\";\nimport {StateList, SubmissionMap} from \"../../Type/ISubmission\";\nimport {UrlPrefix} from \"../../Config/constValue\";\n\nconst Overview = (props: any) => {\n\n    const contestId = props.match.params.contestId\n    const contestInfo = props.ContestInfo[contestId]\n\n    return (\n        <>\n            <div style={{textAlign: \"center\", margin: \"0 auto\"}}>\n                <div style={{textAlign: \"left\", maxWidth: \"1200px\", margin: \"0 auto\"}}>\n                    <Table\n                        className={\"overview-table\"}\n                        size={\"middle\"}\n                        dataSource={contestInfo?.problems}\n                        pagination={false}\n                        columns={[\n                            {\n                                key: \"ID\",\n                                title: \"ID\",\n                                dataIndex: \"problemCode\",\n                                render: (text) => {\n                                    return String.fromCharCode('A'.charCodeAt(0) + parseInt(text) - 1)\n                                }\n                            },\n                            {\n                                key: \"title\",\n                                title: props.t(\"title\"),\n                                dataIndex: \"problemTitle\",\n                                render: (text, row) => {\n                                    return (\n                                        <>\n                                            {!isValueEmpty(row.problemColor) && (\n                                                <span className={\"circle\"} style={{backgroundColor: row.problemColor}}/>\n                                            )}\n                                            <Button type={\"text\"} size={\"small\"} onClick={() => {\n                                                props.history.push(UrlPrefix + \"/contest/\" + contestId + \"/problem/\" + row.problemCode)\n                                            }}>{text}</Button>\n                                        </>\n                                    )\n                                }\n                            },\n                            {\n                                key: \"AC_Submits\",\n                                title: \"通过 / 提交\",\n                                render: (text, row) => {\n                                    return (\n                                        <>\n                                            {row.acceptNum} / {row.submitNum}\n                                        </>\n                                    )\n                                }\n                            },\n                            {\n                                key: \"State\",\n                                title: props.t(\"Status\"),\n                                dataIndex: \"judgeResult\",\n                                render: (text) => {\n                                    if (text === null) return <></>\n                                    else return (\n                                        <TestCase type={\"text\"}\n                                                  caseType={StateList.indexOf(SubmissionMap[text])}/>\n                                    )\n                                }\n                            },\n                            {\n                                key: \"Score\",\n                                title: props.t(\"Score\"),\n                                dataIndex: \"judgeScore\"\n                            }\n                        ]}\n\n                    >\n\n                    </Table>\n                </div>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    const State: ContestState = state.ContestReducer\n    return {\n        ContestInfo: State.contestInfo\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(withRouter(Overview)))"],"sourceRoot":""}