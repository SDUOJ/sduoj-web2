{"version":3,"sources":["Component/problemSet/API/getProblemSetInfo.ts","Utils/dealFloat.ts","Component/common/DTime.tsx","Component/problemSet/Overview.tsx"],"names":["useProblemSetInfo","psid","onError","undefined","problemSetInfo","useSelector","state","ProblemSetReducer","problemSetInfo_cache","dispatch","useDispatch","useState","nowKey","setNowKey","nowValue","setNowValue","useEffect","type","key","data","cApi","getProblemSetInfo","parseInt","then","res","catch","error","dealFloat","v","isValueEmpty","toString","length","toFixed","DTime","props","Date","now","nowTime","setNowTime","intervalId","setInterval","clearInterval","TimeDiff","time","TimeCard","nowSliderTime","setNowSliderTime","timeState","TimeRangeState","start","end","bordered","className","style","float","fontWeight","unix2Time","color","value","format","marginTop","tipFormatter","min","max","Math","marks","timeSetting","l","i","x","tm_end","weight","span","tm_start","connect","State","UState","UserReducer","roles","userInfo","withTranslation","withRouter","problemSetId","match","params","detailInfo","setDetailInfo","vis","setVis","visible","footer","onOk","onCancel","size","columns","dataIndex","showHeader","pagination","dataSource","getTime","t","proType","score","point","submit_time","AL","e_id","e_weight","e_submit_time","BL","p_id","p_weight","p_submit_time","ML","concat","config","useSameSE","usePractice","practiceTimeSetting","groupInfo","map","programCol","push","title","width","render","text","row","e_status","caseType","StateList","indexOf","SubmissionMap","p_status","gutter","showScoreInRunning","index","name","problemInfo","onClick","history","UrlPrefix","hasJudge","judgeLock"],"mappings":"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","file":"static/js/47.c38cccd4.chunk.js","sourcesContent":["import {useDispatch, useSelector} from \"react-redux\";\nimport cApi from \"Utils/API/c-api\"\nimport {useEffect, useState} from \"react\";\n\nconst useProblemSetInfo = (psid: string, onError: any = undefined) => {\n    const problemSetInfo = useSelector((state: any) => {\n        return state.ProblemSetReducer.problemSetInfo[psid]\n    })\n    const problemSetInfo_cache = useSelector((state: any) => {\n        return state.ProblemSetReducer.problemSetInfo[psid + \"-cache\"]\n    })\n    const dispatch = useDispatch()\n\n    const [nowKey, setNowKey] = useState<string>()\n    const [nowValue, setNowValue] = useState<any>()\n\n    useEffect(() => {\n        if (nowKey !== psid) {\n            if (problemSetInfo_cache === undefined && problemSetInfo === undefined) {\n                dispatch({\n                    type: \"setProblemSetInfo\",\n                    key: psid + \"-cache\",\n                    data: true\n                })\n                cApi.getProblemSetInfo({psid: parseInt(psid)}).then((res: any) => {\n                    dispatch({\n                        type: \"setProblemSetInfo\",\n                        key: psid,\n                        data: res\n                    })\n                    dispatch({\n                        type: \"setProblemSetInfo\",\n                        key: psid + \"-cache\",\n                        data: undefined\n                    })\n                    setNowValue(res)\n                }).catch((error) => {\n                    onError && onError(error)\n                })\n            } else {\n                setNowValue(problemSetInfo)\n            }\n            setNowKey(psid)\n        } else {\n            setNowValue(problemSetInfo)\n        }\n    }, [problemSetInfo, psid])\n    return nowValue\n}\n\nexport default useProblemSetInfo\n","import {isValueEmpty} from \"./empty\";\n\nconst dealFloat = (v: number) => {\n    if(isValueEmpty(v)) return 0\n    if(v.toString().length > 6) return v.toFixed(2)\n    return v\n}\n\nexport default dealFloat;\n","import {useEffect, useState} from \"react\";\nimport {TimeDiff} from \"../../Utils/Time\";\n\nconst DTime = (props: any)=>{\n\n    const [nowTime, setNowTime] = useState<number>(Date.now())\n\n    const update = () => {\n        setNowTime(Date.now())\n    }\n\n    useEffect(() => {\n        let intervalId = setInterval(() => update(), 1000)\n        return () => clearInterval(intervalId)\n    })\n\n    return (\n        <>\n            {props.type === \"before\" && TimeDiff(props.time, nowTime)}\n            {props.type === \"after\" && TimeDiff(nowTime, props.time)}\n        </>\n    )\n}\n\nexport default DTime","import {withTranslation} from \"react-i18next\";\nimport {withRouter} from \"react-router-dom\";\nimport {Button, Card, Col, Modal, Row, Slider, Space, Table} from \"antd\";\nimport React, {Dispatch, useEffect, useState} from \"react\";\nimport {connect} from \"react-redux\";\nimport {UrlPrefix} from \"../../Config/constValue\";\nimport {ProblemSetState} from \"../../Redux/Action/problemSet\";\nimport \"Assert/css/problemSet.css\"\nimport {TimeRangeState, unix2Time} from \"../../Utils/Time\";\nimport DTime from \"../common/DTime\";\nimport Countdown from \"antd/lib/statistic/Countdown\";\nimport {UserState} from \"../../Type/Iuser\";\nimport useProblemSetInfo from \"./API/getProblemSetInfo\";\nimport {isValueEmpty} from \"../../Utils/empty\";\nimport dealFloat from \"../../Utils/dealFloat\";\nimport {StateList, SubmissionMap} from \"../../Type/ISubmission\";\nimport TestCase from \"../submission/TestCase\";\n\nconst Overview = (props: any) => {\n\n    const problemSetId = props.match.params.problemSetId\n    const problemSetInfo = useProblemSetInfo(problemSetId)\n\n    const [detailInfo, setDetailInfo] = useState<any>()\n    const [vis, setVis] = useState<boolean>(false)\n\n    // console.log(problemSetInfo)\n\n    return (\n        <>\n            <Modal\n                visible={vis}\n                footer={false}\n                onOk={() => setVis(false)}\n                onCancel={() => setVis(false)}\n            >\n                <Table\n                    size={\"small\"}\n                    columns={[{dataIndex: \"key\"}, {dataIndex: \"value\"}]}\n                    showHeader={false}\n                    pagination={false}\n                    dataSource={(() => {\n                        const getTime = (t: any) => {\n                            return isValueEmpty(t) ? \"未提交\" : unix2Time(t)\n                        }\n                        if (detailInfo?.proType !== 2)\n                            return [\n                                {key: \"得分\", value: detailInfo?.score},\n                                {key: \"分值\", value: detailInfo?.point},\n                                {key: \"权重\", value: detailInfo?.weight},\n                                {\n                                    key: \"提交时间\",\n                                    value: getTime(detailInfo?.submit_time)\n                                },\n                            ]\n                        else {\n                            const AL = [\n                                {key: \"限时提交\", value: detailInfo?.e_id},\n                                {key: \"限时权重\", value: detailInfo?.e_weight},\n                                {key: \"限时提交时间\", value: getTime(detailInfo?.e_submit_time)},\n                            ]\n                            const BL = [\n                                {key: \"补题提交\", value: detailInfo?.p_id},\n                                {key: \"补题权重\", value: detailInfo?.p_weight},\n                                {key: \"补题提交时间\", value: getTime(detailInfo?.p_submit_time)},\n                            ]\n                            let ML = [\n                                {key: \"得分\", value: detailInfo?.score},\n                                {key: \"分值\", value: detailInfo?.point},\n                            ]\n                            if (detailInfo?.type === \"sameTimeAndPractice\") {\n                                ML = ML.concat(AL)\n                                ML = ML.concat(BL)\n                            } else if (detailInfo?.type === \"sameTime\") {\n                                ML = ML.concat(AL)\n                            } else {\n                                ML = ML.concat(BL)\n                            }\n                            return ML\n                        }\n                    })()}\n                />\n            </Modal>\n            {(problemSetInfo !== undefined && (\n                <>\n                    {(() => {\n                        if (problemSetInfo.config.useSameSE === 1) {\n                            const timeState_running = TimeRangeState(problemSetInfo.tm_start, problemSetInfo.tm_end)\n                            if (timeState_running === \"end\" && problemSetInfo.config.usePractice === 1) {\n                                let practiceTimeSetting = problemSetInfo.config.practiceTimeSetting\n                                let start = practiceTimeSetting[0].tm_start\n                                let end = practiceTimeSetting[practiceTimeSetting.length - 1].tm_end\n                                return (\n                                    <div style={{marginTop: 24}}>\n                                        <TimeCard\n                                            start={parseInt(start)}\n                                            end={parseInt(end)}\n                                            timeSetting={practiceTimeSetting}\n                                            bordered={false}\n                                        />\n                                    </div>\n                                )\n                            } else {\n                                return (\n                                    <div style={{marginTop: 24}}>\n                                        <TimeCard\n                                            start={parseInt(problemSetInfo.tm_start)}\n                                            end={parseInt(problemSetInfo.tm_end)}\n                                            timeSetting={[{\n                                                tm_start: problemSetInfo.tm_start,\n                                                tm_end: problemSetInfo.tm_end,\n                                                weight: 1\n                                            }]}\n                                            bordered={false}\n                                        />\n                                    </div>\n                                )\n                            }\n                        }\n                    })()}\n                    {problemSetInfo.groupInfo.map((value: any) => {\n                        let start, end\n                        if (value.timeSetting !== null) {\n                            start = value.timeSetting[0].tm_start\n                            end = value.timeSetting[value.timeSetting.length - 1].tm_end\n                        }\n                        const programCol: any = []\n                        if (value.type === 2) {\n                            programCol.push({\n                                key: \"Result\",\n                                title: \"评测结果\",\n                                width: \"auto\",\n                                render: (text: any, row: any) => {\n                                    return (\n                                        <Space size={24}>\n                                            {row.e_status && (\n                                                <Space size={0}>\n                                                    限时：<TestCase\n                                                        type={\"text\"}\n                                                        caseType={StateList.indexOf(SubmissionMap[row.e_status])}\n                                                    />\n                                                </Space>\n                                            )}\n                                            {row.p_status && (\n                                                <Space size={0}>\n                                                    补题：<TestCase\n                                                    type={\"text\"}\n                                                    caseType={StateList.indexOf(SubmissionMap[row.p_status])}\n                                                />\n                                                </Space>\n                                            )}\n                                        </Space>\n                                    )\n                                }\n                            })\n                        }\n                        return (\n                            <Row gutter={24}>\n                                <Col span={problemSetInfo.config.useSameSE === 1 ? 24 : 16}>\n                                    <Table\n                                        className={\"problemSet-overview-table\"}\n                                        size={\"small\"}\n                                        title={() => {\n                                            if (problemSetInfo.config.showScoreInRunning === 0) {\n                                                return (<>\n                                                    题组{value.index + 1} {value.name}\n                                                </>)\n                                            } else {\n                                                return (<>\n                                                    题组{value.index + 1} {value.name} {`(${dealFloat(value.point)}分)`}\n                                                </>)\n                                            }\n                                        }}\n                                        dataSource={value.problemInfo}\n                                        pagination={false}\n                                        columns={[\n                                            {\n                                                key: \"ID\",\n                                                title: \"ID\",\n                                                dataIndex: \"index\",\n                                                width: \"auto\",\n                                                render: (text, row, index) => {\n                                                    return (\n                                                        <Button type={\"text\"} size={\"small\"} onClick={() => {\n                                                            props.history.push(UrlPrefix + `/problemSet/${problemSetId}/problem/${value.index}/${index}`)\n                                                        }}>{index + 1} {row.name ? `(${row.name})` : \"\"}</Button>\n                                                    )\n                                                }\n                                            },\n                                            {\n                                                key: \"State\",\n                                                title: props.t(\"Status\"),\n                                                dataIndex: \"hasAnswer\",\n                                                width: \"auto\",\n                                                render: (text, row) => {\n                                                    if (value.type === 1) {\n                                                        if (text) {\n                                                            if (row.hasJudge === false && row.judgeLock === null) {\n                                                                return \"已提交 - 未批阅\"\n                                                            } else if (row.hasJudge === false && row.judgeLock !== null) {\n                                                                return \"已提交 - 正在批阅\"\n                                                            } else if (row.hasJudge === true) {\n                                                                return \"已提交 - 已批阅\"\n                                                            } else return \"已提交\"\n                                                        } else return \"未提交\"\n                                                    } else {\n                                                        if (text) return \"已提交\"\n                                                        else return \"未提交\"\n                                                    }\n                                                }\n                                            },\n                                            ...programCol,\n                                            {\n                                                key: \"Point\",\n                                                title: \"分数与详情\",\n                                                width: \"auto\",\n                                                dataIndex: \"point\",\n                                                render: (text, row) => {\n                                                    if (problemSetInfo.config.showScoreInRunning === 0) {\n                                                        return \"-\"\n                                                    } else {\n                                                        if (row.score === undefined)\n                                                            return (\n                                                                <span> {`-/${text.toFixed(2)}`}  </span>\n                                                            )\n                                                        return (\n                                                            <span>\n                                                            <Button type={\"link\"} onClick={() => {\n                                                                setDetailInfo({...row, proType: value.type})\n                                                                setVis(true)\n                                                            }}>\n                                                                {`${dealFloat(row.score)}/${dealFloat(text)}`}\n                                                            </Button>\n                                                        </span>\n                                                        )\n\n                                                    }\n                                                }\n                                            },\n                                            // {\n                                            //     key: \"antiCheatingRate\",\n                                            //     title: \"查重率与查重结果\",\n                                            //     width: \"auto\",\n                                            //     dataIndex: \"antiCheatingRate\",\n                                            //     render: (text, row) => {\n                                            //         if (text === undefined) return \"不查重\"\n                                            //         return <span>{text} / 暂未查重</span>\n                                            //     }\n                                            // },\n                                        ]}\n                                    />\n                                </Col>\n                                {problemSetInfo.config.useSameSE === 0 && (\n                                    <Col span={8}>\n                                        <TimeCard\n                                            start={parseInt(start)}\n                                            end={parseInt(end)}\n                                            timeSetting={[]}\n                                            bordered={true}\n                                        />\n                                    </Col>\n                                )}\n                            </Row>\n                        )\n                    })}\n                </>\n            ))}\n\n        </>\n    )\n}\n\ninterface TimeCardProps {\n    start: number\n    end: number\n    timeSetting: any\n    bordered: boolean\n}\n\nconst TimeCard = (props: TimeCardProps) => {\n    const [nowSliderTime, setNowSliderTime] = useState<number>(Date.now())\n    const update = () => {\n        setNowSliderTime(Date.now())\n    }\n    useEffect(() => {\n        let intervalId = setInterval(() => update(), 1000)\n        return () => clearInterval(intervalId)\n    })\n    let timeState = TimeRangeState(props.start, props.end)\n    return (\n        <>\n            <Card bordered={props.bordered}>\n                <div className={\"center\"}>\n                    <div style={{float: \"left\"}}>\n                        <div style={{fontWeight: \"bold\"}}>开始时间：</div>\n                        {unix2Time(props.start)}\n                    </div>\n                    <span>\n                        {timeState === \"wait\" && (\n                            <span style={{color: \"blue\"}}>\n                                <Space>\n                                    距离开始还有：\n                                    <Countdown\n                                        className={\"contestHeaderTimer\"}\n                                        value={props.start}\n                                        format=\"H 时 m 分 s 秒\"\n                                    />\n                                </Space>\n                            </span>\n                        )}\n                        {timeState === \"running\" && (\n                            <span style={{color: \"red\"}}>进行中</span>\n                        )}\n                        {timeState === \"end\" && (\n                            <span style={{color: \"green\"}}>已结束</span>\n                        )}\n                                                </span>\n                    <div style={{float: \"right\"}}>\n                        <div style={{fontWeight: \"bold\"}}>结束时间：</div>\n                        {unix2Time(props.end)}\n                    </div>\n                </div>\n                {timeState !== \"wait\" && (\n                    <Slider\n                        style={{marginTop: 50}}\n                        tipFormatter={null}\n                        min={props.start}\n                        max={props.end}\n                        value={\n                            Math.max(Math.min(nowSliderTime, props.end), props.start)\n                        }\n                        marks={props.timeSetting.length === 0 ? undefined : (() => {\n                            let l: any = {}\n                            for (let i = 0; i < props.timeSetting.length; i++) {\n                                let x = props.timeSetting[i]\n                                l[x.tm_end] = (x.weight * 100).toString() + \"%\"\n                            }\n                            return l\n                        })()}\n                    />\n                )}\n                <div style={{marginTop: 15}} className={\"center\"}>\n                    <Row>\n                        <Col span={8}>\n                            {timeState === \"running\" && (\n                                <span style={{float: \"left\"}}>\n                                    <span style={{fontWeight: \"bold\"}}>当前折扣：</span>\n                                    {(() => {\n                                        for (let i = 0; i < props.timeSetting.length; i++) {\n                                            let x = props.timeSetting[i]\n                                            if (x.tm_start <= Date.now() && Date.now() <= x.tm_end) {\n                                                return (x.weight * 100).toString() + \"%\"\n                                            }\n                                        }\n                                    })()}\n                                </span>\n                            )}\n                        </Col>\n                        <Col span={8}>\n\n                        </Col>\n                        <Col span={8}>\n                            {timeState === \"running\" && (\n                                <span style={{float: \"right\"}}>\n                                    <span style={{fontWeight: \"bold\"}}>折扣剩余：</span>\n                                    {(() => {\n                                        for (let i = 0; i < props.timeSetting.length; i++) {\n                                            let x = props.timeSetting[i]\n                                            if (x.tm_start <= Date.now() && Date.now() <= x.tm_end) {\n                                                return (\n                                                    <DTime type={\"after\"} time={x.tm_end}/>\n                                                )\n                                            }\n                                        }\n                                    })()}\n                                </span>\n                            )}\n                        </Col>\n                    </Row>\n                </div>\n            </Card>\n\n        </>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    const State: ProblemSetState = state.ProblemSetReducer\n    const UState: UserState = state.UserReducer\n    return {\n        problemSetInfo: State.problemSetInfo,\n        roles: UState.userInfo?.roles\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<any>) => ({})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(withTranslation()(withRouter(Overview)))\n"],"sourceRoot":""}